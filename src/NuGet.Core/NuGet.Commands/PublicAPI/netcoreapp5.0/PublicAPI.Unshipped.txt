NuGet.Commands.LockFileBuilder.CreateLockFile(NuGet.ProjectModel.LockFile previousLockFile, NuGet.ProjectModel.PackageSpec project, System.Collections.Generic.IEnumerable<NuGet.Commands.RestoreTargetGraph> targetGraphs, System.Collections.Generic.IReadOnlyList<NuGet.Repositories.NuGetv3LocalRepository> localRepositories, NuGet.DependencyResolver.RemoteWalkContext context, NuGet.Commands.LockFileBuilderCache lockFileBuilderCache) -> NuGet.ProjectModel.LockFile
NuGet.Commands.LockFileBuilderCache.TryAddLockFileTargetLibrary(NuGet.Commands.RestoreTargetGraph graph, NuGet.Frameworks.NuGetFramework framework, NuGet.ProjectModel.LockFileLibrary lockFileLibrary, NuGet.LibraryModel.LibraryDependency libraryDependency, NuGet.LibraryModel.LibraryIncludeFlags libraryIncludeFlags, NuGet.ProjectModel.LockFileTargetLibrary lockFileTargetLibrary) -> bool
NuGet.Commands.LockFileBuilderCache.TryGetLockFileTargetLibrary(NuGet.Commands.RestoreTargetGraph graph, NuGet.Frameworks.NuGetFramework framework, NuGet.ProjectModel.LockFileLibrary lockFileLibrary, NuGet.LibraryModel.LibraryDependency libraryDependency, NuGet.LibraryModel.LibraryIncludeFlags libraryIncludeFlags) -> NuGet.ProjectModel.LockFileTargetLibrary
NuGet.Commands.RestoreCommand.RestoreCommand(NuGet.Commands.RestoreRequest request, NuGet.Commands.LockFileBuilderCache lockFileBuilderCache) -> void
static NuGet.Commands.PushRunner.Run(NuGet.Configuration.ISettings settings, NuGet.Configuration.IPackageSourceProvider sourceProvider, System.Collections.Generic.IList<string> packagePaths, string source, string apiKey, string symbolSource, string symbolApiKey, int timeoutSeconds, bool disableBuffering, bool noSymbols, bool noServiceEndpoint, bool skipDuplicate, NuGet.Common.ILogger logger) -> System.Threading.Tasks.Task
